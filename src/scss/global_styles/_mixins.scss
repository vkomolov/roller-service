@use "sass:math";

$flex-box-row-center-wrap: row, center, center, wrap;
$flex-box-row-center-nowrap: row, center, center, nowrap;
$flex-box-row-between-wrap: row, space-between, center, wrap;
$flex-box-row-between-nowrap: row, space-between, center, nowrap;
$flex-box-row-left-wrap: row, flex-start, center, wrap;
$flex-box-row-left-nowrap: row, flex-start, center, nowrap;
$flex-box-row-right-wrap: row, flex-end, center, wrap;
$flex-box-row-right-nowrap: row, flex-end, center, nowrap;
$flex-box-row-top-wrap: row, center, flex-start, wrap;
$flex-box-row-top-nowrap: row, center, flex-start, nowrap;
$flex-box-row-bottom-wrap: row, center, flex-end, wrap;
$flex-box-row-bottom-nowrap: row, center, flex-end, nowrap;
$flex-box-col-left-wrap: column, center, flex-start;
$flex-box-col-right-wrap: column, center, flex-end;
$flex-box-col-top-wrap: column, flex-start, center;
$flex-box-col-center-wrap: column, center, center;
$element-shadow: 0.15em, 0.3em, rgba(0, 0, 0, .8);

///MIXIN

@mixin flex-box($flow, $justify, $align, $wrap:wrap) {
  display: flex;
  flex-flow: $flow $wrap;
  justify-content: $justify;
  align-items: $align;
}

@mixin transition($property: null, $time: 0.15s) {
  @if $property != null {
    transition: $property $time ease-in-out;
  } @else {
    transition: $time ease-in-out;
  }
}

@mixin init-font($font-size, $font-weight) {
  font: {
    size: $font-size;
    weight: $font-weight;
  }
}

@mixin text-shadow($dim, $shadow, $color:rgba(0,0,0,0.8)) {
  text-shadow: $dim $dim $shadow $color;
}

@mixin box-shadow($dim, $shadow, $color:rgba(0,0,0,0.8)) {
  box-shadow: $dim $dim $shadow $color;
}

@mixin scroll-init($width, $thumbColor, $trackColor) {
  overflow-x: hidden;
  overflow-y: auto;
  scroll-behavior: smooth;

  /* width */
  &::-webkit-scrollbar {
    width: $width;
  }

  /* Handle */
  &:hover::-webkit-scrollbar-thumb {
    background-color: $thumbColor;
  }

  /* Track */
  &:hover::-webkit-scrollbar-track {
    background-color: $trackColor;
  }
}

@mixin fluid-font-size($max-media, $min-media, $max-value, $min-value) {
  $default-browser-size: 16;
  $max-size-ratio: math.div($max-value, $default-browser-size);
  $min-size-ratio: math.div($min-value, $default-browser-size);
  $max-width-ratio: math.div($max-media, $default-browser-size);
  $min-width-ratio: math.div($min-media, $default-browser-size);

  $ratio: math.div(($max-size-ratio - $min-size-ratio), ($max-width-ratio - $min-width-ratio));
  $yAxisInterSection: -$min-width-ratio * $ratio + $min-size-ratio;

  font-size: clamp(
    #{$min-size-ratio * 1rem},
    #{$ratio * 100vw + $yAxisInterSection * 1rem},
    #{$max-size-ratio * 1rem}
  );
}


////////////// FUNCTIONS ////////////////
//!!! the arguments must be integers, default measure unit is "px" (1280, 640, 80, 32, px)

@function calculate-dimension($max-width, $min-width, $max-value, $min-value, $measure:px) {
  $width-range: $max-width - $min-width;
  $value-diff: $max-value - $min-value;

  // Normalize the viewport width
  $normalized-width: min(max(100vw, #{$min-width}#{$measure}), #{$max-width}#{$measure});

  // Расчет
  @return calc(($value-diff * ($normalized-width - #{$min-width}#{$measure})) / $width-range + #{$min-value}#{$measure});
}

@function em($pixel-value, $use-rem: false) {
  @if type-of($pixel-value) == 'number' {
    @if $use-rem {
      // Если $use-rem == true, делим на 1rem
      @return calc(#{$pixel-value} / #{1rem});
    } @else {
      // Если $use-rem == false (или не передан), делим на 1em
      @return calc(#{$pixel-value} / #{1em});
    }
  } @else {
    @error "Invalid input: '$pixel-value' must be a number.";
  }
}


